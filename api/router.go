package api

import (
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	_ "github.com/rizkybiz/petkeep-server/docs" // docs is generated by Swag CLI, must be imported
	HTTPSwagger "github.com/swaggo/http-swagger"
)

// @title Petkeeper API
// @version 1.0
// @description This is the API behind Petkeeper
// @host 35.222.32.211:8080
// @BasePath /api/v1
// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
func (s *server) routes() {

	// Setup the new router
	s.router = mux.NewRouter()

	// set up default middleware on the router
	s.router.Use(s.httpLogger)
	s.router.Use(s.httpTiming)
	s.router.Use(s.httpCount)

	// Static folder to serve
	staticDir := "/docs/"

	// Set up the "no auth needed" paths
	s.router.PathPrefix(staticDir).Handler(http.StripPrefix(staticDir, http.FileServer(http.Dir("."+staticDir))))
	s.router.PathPrefix("/swagger/").Handler(HTTPSwagger.Handler(HTTPSwagger.URL(fmt.Sprintf("http://%s:%s/docs/swagger.json", s.serverHost, s.listenPort))))
	s.router.Path("/api/"+version+"/login").Handler(s.handlerLogin()).Methods("POST", "OPTIONS")
	s.router.Path("/api/" + version + "/users").Handler(s.handlerUsersCreate()).Methods("POST")

	// Set up the top level api subrouter
	api := s.router.PathPrefix("/api/" + version).Subrouter()

	// Protect all endpoints beyond here with token checks
	api.Use(s.isAuthenticated)

	// Set up user paths
	users := api.PathPrefix("/users").Subrouter().StrictSlash(true)
	users.HandleFunc("", s.handlerUsersGetOne()).Methods("GET")
	users.HandleFunc("/reset_password", s.handlerResetPassword()).Methods("POST")

	// Set up pets paths
	pets := api.PathPrefix("/pets").Subrouter().StrictSlash(true)
	pets.HandleFunc("", s.handlerPetsGetAll()).Methods("GET")
	pets.HandleFunc("/{id}", s.handlerPetsGetOne()).Methods("GET")
	pets.HandleFunc("", s.handlerPetsCreate()).Methods("POST")
	pets.HandleFunc("/{id}", s.handlerPetsUpdate()).Methods("PUT")
	pets.HandleFunc("/{id}", s.handlerPetsDelete()).Methods("DELETE")
}
